{"ast":null,"code":"const possibleOptionsEngine = ['Petrol', 'Diesel', 'Electric'];\nconst possibleOptionsTransmission = ['Automatic', 'Manual', 'Robotic'];\nconst possibleOptionsFuelCapacity = [500, 600, 400, 700];\nconst possibleOptionsPrices = [900000, 1000000, 1200000, 2000000, 2200000, 2500000, 3000000];\nfunction getRandomYear() {\n  let year;\n  const randomNumber = Math.floor(Math.random() * 23);\n  if (randomNumber <= 9) {\n    year = `200${randomNumber}`;\n    return year;\n  }\n  year = `20${randomNumber}`;\n  // возвращает строку\n  return year;\n}\nfunction getRandomOption(possibleOptions) {\n  const randomElement = possibleOptions[Math.floor(Math.random() * possibleOptions.length)];\n  return randomElement;\n}\nconst createCardData = arrayData => {\n  const newData = arrayData.map((el, index) => {\n    let newPrice = getRandomOption(possibleOptionsPrices);\n    Object.assign(el, {\n      price: newPrice\n    });\n    let newYear = getRandomYear();\n    Object.assign(el, {\n      year: newYear\n    });\n    if (index < 6) {\n      Object.assign(el, {\n        color: 'white'\n      });\n    }\n    if (index === 7) {\n      Object.assign(el, {\n        color: 'red'\n      });\n    }\n    if (index > 7 && index < 10) {\n      Object.assign(el, {\n        color: 'blue'\n      });\n    }\n    if (index === 10) {\n      Object.assign(el, {\n        color: 'black'\n      });\n    }\n    let newEngine = getRandomOption(possibleOptionsEngine);\n    Object.assign(el, {\n      engine: newEngine\n    });\n    if (el.engine === 'Petrol' || el.engine === 'Diesel') {\n      let newTransmission = getRandomOption(possibleOptionsTransmission);\n      Object.assign(el, {\n        transmission: newTransmission\n      });\n    }\n    if (el.engine === 'Electric') {\n      let newFuelCapacity = getRandomOption(possibleOptionsFuelCapacity);\n      Object.assign(el, {\n        fuelCapacity: newFuelCapacity\n      });\n    }\n    return el;\n  });\n  return newData;\n};\nexport default createCardData;","map":{"version":3,"names":["possibleOptionsEngine","possibleOptionsTransmission","possibleOptionsFuelCapacity","possibleOptionsPrices","getRandomYear","year","randomNumber","Math","floor","random","getRandomOption","possibleOptions","randomElement","length","createCardData","arrayData","newData","map","el","index","newPrice","Object","assign","price","newYear","color","newEngine","engine","newTransmission","transmission","newFuelCapacity","fuelCapacity"],"sources":["/home/user/Рабочий стол/тестовые проекты/TS тренировка/ts/src/helpers/createCarsData.js"],"sourcesContent":["const possibleOptionsEngine = ['Petrol', 'Diesel', 'Electric']\nconst possibleOptionsTransmission = ['Automatic', 'Manual', 'Robotic']\nconst possibleOptionsFuelCapacity = [500, 600, 400, 700]\nconst possibleOptionsPrices = [900000, 1000000, 1200000, 2000000, 2200000, 2500000, 3000000]\n\nfunction getRandomYear () {\n  let year;\n  const randomNumber = Math.floor(Math.random() * 23);\n  if (randomNumber <= 9) {\n    year = `200${randomNumber}`\n    return year\n  }\n  year = `20${randomNumber}`\n  // возвращает строку\n  return year\n}\n\nfunction getRandomOption (possibleOptions) {\n  const randomElement = possibleOptions[Math.floor(Math.random() * possibleOptions.length)];\n  return randomElement\n}\n\nconst createCardData = (arrayData) => {\n  const newData = arrayData.map((el, index) => {\n    let newPrice = getRandomOption(possibleOptionsPrices)\n    Object.assign(el, {price: newPrice});\n\n    let newYear = getRandomYear()\n    Object.assign(el, {year: newYear})\n\n    if (index < 6) {\n      Object.assign(el, {color: 'white'})\n    }\n    if (index === 7) {\n      Object.assign(el, {color: 'red'})\n    }\n    if (index > 7 && index < 10) {\n      Object.assign(el, {color: 'blue'})\n    }\n\n    if (index === 10) {\n      Object.assign(el, {color: 'black'})\n    }\n\n\n    let newEngine = getRandomOption(possibleOptionsEngine)\n    Object.assign(el, {engine: newEngine})\n\n    if (el.engine === 'Petrol' ||  el.engine === 'Diesel') {\n      let newTransmission = getRandomOption(possibleOptionsTransmission)\n      Object.assign(el, {transmission: newTransmission})\n    }\n\n    if (el.engine === 'Electric') {\n      let newFuelCapacity = getRandomOption(possibleOptionsFuelCapacity)\n      Object.assign(el, {fuelCapacity: newFuelCapacity})\n    }\n\n    return el\n  })\n  return newData\n}\n\n\nexport default createCardData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}